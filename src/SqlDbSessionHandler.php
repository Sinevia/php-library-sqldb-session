<?php

namespace Sinevia;

use PDO;
use PDOStatement;
use Sinevia\SqlDb;

class SqlDbSessionHandler implements \SessionHandlerInterface {
    /**
     * @var bool defines whether the MySQL connection is been initialized
     */
    private $initialized = false;
    /**
     * @var Sinevia\SqlDb
     */
    protected $db = null;
    /**
     * @var PDO pdo object of database connection
     */
    protected $pdo;
    /**
     * @var PDOStatement statement to insert a new record
     */
    private $statement;
    /**
     * @var string the table to store the logs in
     */
    private $table = 'snv_sessions_session';
    private $debug = false;

    /**
     * Constructor of this class, sets the PDO and calls parent constructor
     *
     * @param PDO $pdo                  PDO Connector for the database
     * @param bool $table               Table in the database to store the logs in
     * @param bool|int $level           Debug level which this handler should store
     * @param bool $bubble
     */
    public function __construct(PDO $pdo = null, $table = null)
    {
        if ($pdo != null) {
            $this->pdo = $pdo;
            $this->db = new SqlDb();
            $this->db->setPdo($this->pdo);
        }

        if ($tabe != null){
            $this->table = $table;
        }

        parent::__construct();
    }

    /**
     * Initializes this handler by creating the table if it not exists
     */
    private function initialize()
    {
        if ($this->initialized == true) {
            return;
        }

        $this->db->debug = $this->debug;
        if ($this->db->table($this->table)->exists() == false) {
            $this->db->table($this->table)
                ->column('Id', 'INTEGER', 'PRIMARY KEY')
                ->column('Data', 'TEXT')
                ->column('CreatedAt', 'DATETIME')
                ->column('UpdatedAt', 'DATETIME')
                ->create();
        }
        $this->initialized = true;
    }


    public function close() {
        return true;
    }

    public function destroy($sessionId) {
        $this->initialize();

        $session = $this->db->table($this->table)
                ->where('Id', '=', $sessionId)
                ->delete();
        return true;
    }

    public function gc($maximumLifetime) {
        $this->initialize();

        $expireDate = date('Y-m-d H:i:s', (time() - intval($maximumLifetime)));
        $this->db->table($this->table)
                ->where('UpdatedAt', '<', $expireDate)
                ->delete();
        return true;
    }

    /**
     * Opens the session
     * @param string $sessionSavePath
     * @param string $sessionName
     * @return boolean
     */
    public function open($sessionSavePath, $sessionName) {
        $this->initialize();

        //delete old session handlers
        $expireDate = date('Y-m-d H:i:s', (time() - (3600 * 24)));
        $this->db->table($this->table)
                ->where('CreatedAt', '<', $expireDate)
                ->delete();
        return true;
    }

    public function read($sessionId) {
        $this->initialize();

        // DEBUG: db()->debug = true;
        $session = $this->db->table($this->table)
                ->where('Id', '=', $sessionId)
                ->selectOne();
        $data = (string) $session['Data'] ?? '';
        return $data;
    }

    public function write($sessionId, $sessionData) {
        $this->initialize();

        // DEBUG: db()->debug = true;
        $session = $this->db->table($this->table)
                ->where('Id', '=', $sessionId)
                ->selectOne();
        if (is_null($session)) {
            $session = [];
            $session['Id'] = $sessionId;
            $session['CreatedAt'] = date('Y-m-d H:i:s');
            db()->table('session')->insert($session);
        }
        $session['UpdatedAt'] = date('Y-m-d H:i:s');
        $session['Data'] = $sessionData;
        db()->table('session')->where('Id', '=', $sessionId)->update($session);
        return true;
    }

    public function create_sid() {
        // available since PHP 5.5.1
        // invoked internally when a new session id is needed
        // no parameter is needed and return value should be the new session id created
        // ...
    }

    public function validateId($sessionId) {
        // implements SessionUpdateTimestampHandlerInterface::validateId()
        // available since PHP 7.0
        // return value should be true if the session id is valid otherwise false
        // if false is returned a new session id will be generated by php internally
        // ...
    }

    public function updateTimestamp($sessionId, $sessionData) {
        return true;
    }

}
